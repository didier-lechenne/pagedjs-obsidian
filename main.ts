import { Plugin, Notice, TFile } from 'obsidian';
import * as path from 'path';
import { ServerConfig } from './src/types/interfaces';
import { Logger } from './src/utils/Logger';
import { Server } from './src/server/server';
import { FileWatcher } from './src/watcher/FileWatcher';
import { ServerCommands } from './src/commands/ServerCommands';
import { PagedJSSettingsTab, PagedJSSettings, DEFAULT_SETTINGS } from './src/settings/SettingsTab';
import { YamlConfigManager } from './src/utils/YamlConfigManager';

export default class NodeServer extends Plugin {
    settings: PagedJSSettings;

    private server: Server | null = null;
    public fileWatcher: FileWatcher | null = null;
    private serverCommands: ServerCommands | null = null;
    private logger: Logger;
    private config: ServerConfig;
    private yamlManager: YamlConfigManager;

    constructor(app: any, manifest: any) {
        super(app, manifest);
        this.logger = Logger.getInstance();
        this.yamlManager = new YamlConfigManager(app);
        
        // Configuration par d√©faut
        this.config = {
            port: 3001,
            publicPath: '',
            autoStart: true,
            watchExtensions: ['md']
        };
    }
    
    async onload() {
        this.logger.info('Chargement du plugin pagedjs-server', 'server');

        // Charger les settings
        await this.loadSettings();

        this.config = {
            port: 3001,
            publicPath: '',
            autoStart: this.settings.autoStart,  
            watchExtensions: ['md']
        };
        
        // Initialiser le chemin public
        this.config.publicPath = path.join(
            (this.app.vault.adapter as any).basePath, 
            this.settings.publicFolder
        );
        
        // Initialiser les composants
        this.initializeComponents();
        
        // Configurer les commandes
        this.setupCommands();
        
        // D√©marrer automatiquement si configur√©
        if (this.config.autoStart) {
            await this.startServer();
        }

        // Ajouter le bouton dans le ribbon
        this.addRibbonIcon('globe', 'Ouvrir PagedJS Server', (evt: MouseEvent) => {
            this.openInBrowser();
        });

        this.logger.info('Plugin pagedjs-server charg√© avec succ√®s', 'server');

        this.addSettingTab(new PagedJSSettingsTab(this.app, this));
    }
    
    private initializeComponents(): void {
        // Initialiser le serveur fusionn√©
        this.server = new Server(this.config);
        
        // ‚úÖ CORRECTION: Initialiser le watcher avec le dossier public
        this.fileWatcher = new FileWatcher(
            this.app.vault, 
            this.config.watchExtensions,
            this.settings.publicFolder // ‚úÖ NOUVEAU: Passer le dossier public
        );
        
        // Initialiser les commandes
        this.serverCommands = new ServerCommands(this);
        
        // Connecter le watcher au serveur pour le rechargement automatique
        this.fileWatcher.onFileChange((event) => {
            if (this.server) {
                this.server.updateLastModified(event.timestamp);
                this.logger.info(`Auto-reload d√©clench√© par: ${event.fileName} (dossier: ${this.settings.publicFolder})`, 'reload');
            }
        });
    }
    
    private setupCommands(): void {
        if (!this.serverCommands) return;
        
        // Commande pour d√©marrer/arr√™ter le serveur
        this.addCommand({
            id: 'toggle-pagedjs-server',
            name: 'D√©marrer/Arr√™ter le serveur',
            callback: () => this.serverCommands!.toggleServer()
        });
        
        // Commande pour ouvrir dans le navigateur
        this.addCommand({
            id: 'open-in-browser',
            name: 'Ouvrir dans le navigateur',
            callback: () => this.serverCommands!.openInBrowser()
        });
        
        // Commande pour voir le statut
        this.addCommand({
            id: 'server-status',
            name: 'Statut du serveur',
            callback: () => this.serverCommands!.showStatus()
        });
        
        // Commande pour voir les logs
        this.addCommand({
            id: 'show-logs',
            name: 'Afficher les logs',
            callback: () => this.serverCommands!.showLogs()
        });
    }

    // =================== M√âTHODES PUBLIQUES POUR LES ONGLETS ===================

    /**
     * M√©thode publique pour afficher les logs
     */
    public showLogs(): void {
        if (this.serverCommands) {
            this.serverCommands.showLogs();
        } else {
            new Notice('‚ùå Le serveur n\'est pas initialis√©');
        }
    }

    /**
     * M√©thode publique pour ouvrir dans le navigateur
     */
    public openInBrowser(): void {
        if (this.serverCommands) {
            this.serverCommands.openInBrowser();
        } else {
            new Notice('‚ùå Le serveur n\'est pas initialis√©');
        }
    }

    /**
     * M√©thode publique pour red√©marrer le serveur
     */
    public async restartServer(): Promise<void> {
        this.logger.info('Red√©marrage du serveur via interface', 'server');
        new Notice('üîÑ Red√©marrage du serveur...');
        
        await this.stopServer();
        // Attendre un peu pour s'assurer que tout est ferm√©
        await new Promise(resolve => setTimeout(resolve, 500));
        await this.startServer();
        
        new Notice('‚úÖ Serveur red√©marr√©');
    }

    /**
     * ‚úÖ NOUVEAU: Exposer l'instance du serveur pour mise √† jour du chemin
     */
    public getServerInstance(): Server | null {
        return this.server;
    }

    /**
     * ‚úÖ M√âTHODE PUBLIQUE: Forcer le rechargement du config.yml actuel
     */
    public async forceReloadCurrentConfig(): Promise<boolean> {
        console.log('üîÑ Rechargement forc√© du config.yml actuel...');
        
        try {
            const yamlConfig = await this.yamlManager.loadConfigFromYaml(this.settings);
            
            if (yamlConfig) {
                console.log('üìä Donn√©es YAML charg√©es:', yamlConfig);
                
                // Pr√©server certaines valeurs critiques
                const currentPublicFolder = this.settings.publicFolder;
                const currentAutoStart = this.settings.autoStart;
                
                // Appliquer TOUTES les donn√©es YAML
                Object.assign(this.settings, yamlConfig);
                
                // Restaurer les valeurs critiques
                this.settings.publicFolder = currentPublicFolder;
                this.settings.autoStart = currentAutoStart;
                
                console.log('‚úÖ Settings forc√©s avec:', this.settings.parts?.length || 0, 'parties');
                console.log('üìä Nouvelles parts:', this.settings.parts);
                
                // Sauvegarder imm√©diatement
                await this.saveData(this.settings);
                
                return true;
            } else {
                console.log('‚ö†Ô∏è Pas de config.yml trouv√©');
                return false;
            }
        } catch (error: any) {
            console.error('‚ùå Erreur rechargement forc√©:', error);
            return false;
        }
    }

    /**
     * ‚úÖ CORRECTION: Recharger config.yml sans red√©marrer le serveur
     */
    public async reloadConfigFromNewFolder(): Promise<void> {
        const newConfigPath = `${this.settings.publicFolder}/config.yml`;
        
        console.log('üîç Recherche config.yml dans nouveau dossier:', newConfigPath);
        
        // ‚úÖ CORRECTION: Mettre √† jour le chemin du serveur imm√©diatement SANS red√©marrer
        const newPublicPath = path.join(
            (this.app.vault.adapter as any).basePath, 
            this.settings.publicFolder
        );
        this.config.publicPath = newPublicPath;
        console.log('üìÅ Nouveau chemin serveur (config):', this.config.publicPath);
        
        // ‚úÖ NOUVEAU: Mettre √† jour le FileWatcher pour surveiller le nouveau dossier
        if (this.fileWatcher) {
            this.fileWatcher.setPublicFolderPath(this.settings.publicFolder);
            console.log('üìÇ FileWatcher mis √† jour pour surveiller:', this.settings.publicFolder);
        }
        
        // ‚úÖ CORRECTION: Mettre √† jour le serveur SANS le red√©marrer
        if (this.server && this.server.isRunning()) {
            this.server.updatePublicPath(newPublicPath);
            console.log('‚úÖ Serveur mis √† jour avec nouveau chemin sans red√©marrage');
        }
        
        // ‚úÖ CORRECTION: Utiliser la m√©thode s√ªre du YamlConfigManager
        try {
            const yamlConfig = await this.yamlManager.loadConfigFromYaml(this.settings);
            
            if (yamlConfig) {
                console.log('üîÑ Config.yml trouv√©, application des donn√©es...');
                console.log('üìä Donn√©es YAML re√ßues:', yamlConfig);
                
                // Pr√©server le publicFolder de l'input utilisateur
                const userPublicFolder = this.settings.publicFolder;
                
                // Appliquer les donn√©es YAML
                Object.assign(this.settings, yamlConfig);
                
                // Restaurer les valeurs critiques
                const criticalSettings = {
                    autoStart: this.settings.autoStart,
                    publicFolder: userPublicFolder // Garder la valeur de l'utilisateur
                };
                Object.assign(this.settings, criticalSettings);
                
                console.log('‚úÖ Settings mis √† jour avec:', this.settings.parts?.length || 0, 'parties');
                console.log('üìä Settings finaux:', { 
                    publicFolder: this.settings.publicFolder,
                    partsCount: this.settings.parts?.length || 0,
                    title: this.settings.title 
                });
                
                // Sauvegarder les settings mis √† jour
                await this.saveData(this.settings);
                
                // ‚úÖ CORRECTION: D√©clencher l'√©v√©nement de refresh APR√àS la sauvegarde
                const refreshEvent = new CustomEvent('pagedjs-settings-refreshed', {
                    detail: { 
                        settings: this.settings,
                        source: 'folder-change',
                        partsLoaded: this.settings.parts?.length || 0
                    }
                });
                document.dispatchEvent(refreshEvent);
                
                console.log('üéØ √âv√©nement refresh d√©clench√©');
                
            } else {
                console.log('‚ö†Ô∏è Pas de config.yml trouv√© dans:', newConfigPath);
                console.log('üí° Vous pouvez cr√©er ce fichier avec l\'onglet Sauvegarde');
                
                // ‚úÖ CORRECTION: D√©clencher quand m√™me un refresh pour vider l'interface
                const refreshEvent = new CustomEvent('pagedjs-settings-refreshed', {
                    detail: { 
                        settings: this.settings,
                        source: 'folder-change-no-config',
                        partsLoaded: 0
                    }
                });
                document.dispatchEvent(refreshEvent);
            }
        } catch (error: any) {
            console.error('‚ùå Erreur rechargement config.yml:', error);
        }
    }

    /**
     * ‚úÖ NOUVEAU: Met √† jour le dossier public surveill√© (appel√© depuis ConfigurationsTab)
     */
    public updatePublicFolder(newPublicFolder: string): void {
        console.log('üìÅ Mise √† jour dossier public:', this.settings.publicFolder, '->', newPublicFolder);
        
        // Mettre √† jour les settings
        this.settings.publicFolder = newPublicFolder;
        
        // Mettre √† jour le chemin public du serveur
        this.config.publicPath = path.join(
            (this.app.vault.adapter as any).basePath, 
            newPublicFolder
        );
        
        // ‚úÖ NOUVEAU: Mettre √† jour le FileWatcher
        if (this.fileWatcher) {
            this.fileWatcher.setPublicFolderPath(newPublicFolder);
            console.log('üìÇ FileWatcher mis √† jour pour surveiller:', newPublicFolder);
        }
        
        // Mettre √† jour le serveur s'il est en cours d'ex√©cution
        if (this.server && this.server.isRunning()) {
            this.server.updatePublicPath(this.config.publicPath);
            console.log('üñ•Ô∏è Serveur mis √† jour avec nouveau chemin:', this.config.publicPath);
        }
    }

    // =================== M√âTHODES DE CONTR√îLE DU SERVEUR ===================
    
    public async startServer(): Promise<void> {
        if (!this.server || !this.fileWatcher) {
            this.logger.error('Composants non initialis√©s', 'server');
            return;
        }
        
        try {
            await this.server.start();
            this.fileWatcher.startWatching();
            
            new Notice(`Serveur d√©marr√© sur le port ${this.server.getPort()}`);
            this.logger.info('Serveur et surveillance d√©marr√©s', 'server');
            
            // ‚úÖ NOUVEAU: Logger les statistiques de surveillance
            const watchStats = this.fileWatcher.getWatchingStats();
            this.logger.info(`Surveillance: ${watchStats.extensions.join(', ')} dans ${watchStats.publicFolder || 'TOUS LES DOSSIERS'}`, 'file');
            
        } catch (error: any) {
            new Notice(`Erreur de d√©marrage: ${error.message}`);
            this.logger.error(`Erreur de d√©marrage: ${error.message}`, 'server');
        }
    }
    
    public async stopServer(): Promise<void> {
        if (!this.server || !this.fileWatcher) {
            new Notice('Aucun serveur en cours d\'ex√©cution');
            return;
        }
        
        await this.server.stop();
        this.fileWatcher.stopWatching();
        
        new Notice('Serveur arr√™t√©');
        this.logger.info('Serveur et surveillance arr√™t√©s', 'server');
    }
    
    public getServerStatus() {
        return this.server?.getStatus() || null;
    }
    
    public isServerRunning(): boolean {
        return this.server?.isRunning() || false;
    }
    
    public getServerPort(): number {
        return this.server?.getPort() || this.config.port;
    }

    // =================== GESTION DES PARAM√àTRES ===================

    async loadSettings() {
        // 1. Charger data.json (peut ne pas exister au premier lancement)
        const dataSettings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
        console.log('üìÅ publicFolder depuis data.json:', dataSettings.publicFolder);
        
        // 2. Essayer de charger config.yml dans ce dossier
        const configPath = `${dataSettings.publicFolder}/config.yml`;
        const configFile = this.app.vault.getAbstractFileByPath(configPath);
        
        console.log('üîç Recherche de config.yml dans:', configPath);
        console.log('üîç Fichier trouv√©:', configFile instanceof TFile);
        
        if (configFile instanceof TFile) {
            this.logger.info('config.yml trouv√©, chargement depuis YAML', 'config');
            try {
                // ‚úÖ CORRECTION: Utiliser la nouvelle m√©thode
                const yamlConfig = await this.yamlManager.loadConfigFromYaml(dataSettings);
                console.log('üîß Parties trouv√©es dans YAML:', yamlConfig?.parts?.length || 0);
                
                // 3. Fusionner : data.json + config.yml
                if (yamlConfig) {
                    this.settings = Object.assign({}, dataSettings, yamlConfig);
                    console.log('‚úÖ Settings finaux - parties:', this.settings.parts?.length || 0);
                    this.logger.info(`Config YAML charg√©e avec ${this.settings.parts?.length || 0} parties`, 'config');
                } else {
                    this.settings = dataSettings;
                    console.log('‚ö†Ô∏è Erreur chargement YAML, utilisation data.json uniquement');
                }
                return;
            } catch (error: any) {
                console.error('‚ùå Erreur parsing YAML:', error);
                this.logger.error(`Erreur lecture config.yml: ${error.message}`, 'config');
            }
        }
        
        // 4. Si pas de config.yml, utiliser seulement data.json
        console.log('üìÅ Pas de config.yml, utilisation de data.json uniquement');
        this.settings = dataSettings;
        console.log('‚úÖ Settings depuis data.json - parties:', this.settings.parts?.length || 0);
    }

    async saveSettings() {
        // Sauvegarder dans data.json
        await this.saveData(this.settings);
        console.log('üíæ Settings sauv√©s dans data.json');
        
        // ‚úÖ CORRECTION: D√©clencher l'√©v√©nement de refresh pour tous les onglets
        const refreshEvent = new CustomEvent('pagedjs-settings-refreshed', {
            detail: { 
                settings: this.settings,
                source: 'save'
            }
        });
        document.dispatchEvent(refreshEvent);
    }

    // =================== D√âCHARGEMENT ===================
    
    async onunload() {
        this.logger.info('D√©chargement du plugin pagedjs-server', 'server');
        
        if (this.server?.isRunning()) {
            await this.stopServer();
        }
        
        // Nettoyer les ressources
        this.fileWatcher?.stopWatching();
        this.logger.clearHistory();
        
        this.logger.info('Plugin pagedjs-server d√©charg√©', 'server');
    }
}